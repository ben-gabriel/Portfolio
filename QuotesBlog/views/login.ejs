
<%- include('./partials/header.ejs') %>

<div id="loginDiv">

    <!-- Nav -->
    <div>
        <button id="loginTab">Login</button>
        <button id="registerTab">Register</button>
        <button id="homeLoginButton">Home</button>
    </div>

    <h3 id="errorMessage"></h3>

    <!-- Login Form -->
    <form action="./login" method="POST" id="loginForm">
        <H1>Login</H1>    
        
        <div>
            <label for="logUsername">Username</label>
            <input type="text" id="logUsername" name='username' required>    
        </div>
        
        <div>
            <label for="logPassword">Password</label>
            <input type="password" id="logPassword" name='password' required>    
        </div>
        
        <button type="submit">Login</button>
        
    </form>
    
    <!-- Register Form -->
    <form action="./register" method="POST" id="registerForm" style="display: none;">
        <h1>Register</h1>
        <div>
            <label for="regUsername">Username</label> 
            <input type="text" id="regUsername" name='username' required value="<%= locals.usernameEntered %>">
        </div>
    
        <div>
            <label for="regPassword">Password</label>
            <input type="password" id="regPassword" name='password' required>    
        </div>
    
        <button type="submit">Register</button>
        <label id="usernameStatus"></label>
    
    </form>
    
</div>

<script>
        
    {// Close Popup
        let homeLoggintButton = document.getElementById('homeLogginButton');
        homeLoginButton.addEventListener('click',()=>{
            location.replace('/')
        });
    }

    {// Change Popup Tab
        let registerTab = document.getElementById('registerTab');
        let registerForm = document.getElementById('registerForm');
        let loginTab = document.getElementById('loginTab');
        let loginForm = document.getElementById('loginForm');

        registerTab.addEventListener('click', ()=>{
            loginForm.style.display = 'none';
            registerForm.style.display = 'block';
        });

        loginTab.addEventListener('click', ()=>{
            registerForm.style.display = 'none';
            loginForm.style.display = 'block';
        });
    }

    {// Register form error check
        let usernameInput = document.getElementById('regUsername');
        let errorMessage = document.getElementById('errorMessage');

        usernameInput.addEventListener('keydown',(key)=>{
            if(key.code === 'Space'){
                key.preventDefault();
                errorMessage.innerText = 'Username cannot contain blank spaces';
                errorMessage.style.visibility = 'visible'
                setTimeout(()=>{
                    errorMessage.style.visibility = 'hidden'
                }, 2000);
            }
        });

        usernameInput.addEventListener('keyup', async(key)=>{
            let fetcher = await fetch('/users/'+usernameInput.value);
            let usernameStatus = document.getElementById('usernameStatus');
            if(fetcher.ok){
                console.log('username taken');
                usernameStatus.innerText = 'Username Taken'
            }
            else{
                usernameStatus.innerText = 'Username Available'
                console.log('username free');
            }
            let inputCheck = usernameInput.value.replace(/\s+/g,'');
            if(inputCheck === ''){
                usernameStatus.innerText = '';
            }
        });
    }

    {// Form Submit
        loginForm.addEventListener('submit', async(e)=>{
            e.preventDefault()

            let formData = new FormData(loginForm);
            let urlEncoded = new URLSearchParams(formData);
            let options = {
                method:'post',
                body:urlEncoded,
            }

            let fetcher = await (await fetch('/popup_login',options)).json();

            if(!fetcher.error){
                location.replace(location.href);
            }
            else{
                errorMessage.innerText = fetcher.error;
            }

        });

        registerForm.addEventListener('submit', async(e)=>{
            e.preventDefault()

            let formData = new FormData(registerForm);
            let urlEncoded = new URLSearchParams(formData);
            let options = {
                method:'post',
                body:urlEncoded,
            }

            let fetcher = await (await fetch('/popup_register',options)).json();

            if(!fetcher.error){
                location.replace(location.href);
            }
            else{
                errorMessage.innerText = fetcher.error;
            }

        });
    }
</script>